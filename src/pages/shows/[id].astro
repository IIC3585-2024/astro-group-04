---
import Layout from "../../layouts/layout.astro";
import { getShow } from "../../services/TVAPIService";
import Chip from "../../components/chip.astro";

// Get the ID from the URL
const { id } = Astro.params;

// Fetch all shows and find the one matching the ID
const show = await getShow(id);

if (!show) {
  throw new Error(`Show with ID ${id} not found`);
}

function getStarRating(rating) {
  const roundedRating = Math.round(rating * 2) / 2; // Round to nearest 0.5
  const stars = [];
  for (let i = 1; i <= 10; i++) {
      if (roundedRating >= i) {
          stars.push('★'); 
      } else {
          stars.push('☆'); 
      }
  }
  return stars.join(' '); 
}
---
<Layout>
  <div class="show-detail">
    <!-- {show} -->
    <img class="show--image" src={show.image} alt={show.name} />
    <div class="show--text">
      <h1>{show.name}</h1>
      <h2>Seasons </h2>
      <h3>{
        show.seasons.map((season, index) => 'S' + (index + 1) + ': ' + season.number).join(" - ")
        }
        </h3>
      {show.genres.map((genre) => (
        <Chip text={genre}></Chip>
      ))}
      <h3>Watch in {show.network ? show.network : 'Unknown streaming'}</h3>
      <div class="star-rating">
        {getStarRating(show.rating)}
      </div>
      <p>{show.summary}</p>
    </div>
  </div>

  <!-- Comment Form -->
  <div class="comment-form">
    <h2>Leave a Comment</h2>
    <form id="commentForm">
      <input type="hidden" id="showId" value={id} />
      <div>
        <label for="author">Author</label>
        <br/>
        <input class="input" type="text" id="author" name="author" required />
      </div>
      <div>
        <label for="body">Comment</label>
        <br/>
        <textarea class="input" id="body" name="body" required></textarea>
      </div>
      <div>
        <label for="rating">Rating</label>
        <br/>
        <input class="input" type="number" id="rating" name="rating" min="1" max="10" required/>
      </div>
      <button type="submit">Submit</button>
    </form>
  </div>

  <!-- Display Comments -->
  <div class="comments">
    <h2>Comments</h2>
    <div id="commentsContainer"></div>
  </div>
</Layout>


<script>
  const form = document.getElementById('commentForm');
  const commentsContainer = document.getElementById('commentsContainer');

  function getComments() {
    const showId = document.getElementById('showId').value;
    const comments = JSON.parse(localStorage.getItem(`comments-${showId}`)) || [];
    return comments;
  }

  function displayComments() {
    const comments = getComments();
    commentsContainer.innerHTML = '';
    if (comments.length === 0) {
      commentsContainer.innerHTML = '<p>No comments yet. Be the first to comment!</p>';
    } else {
      comments.forEach(comment => {
        const commentElement = document.createElement('div');
        commentElement.classList.add('comment');
        commentElement.innerHTML = `
          <p><strong>${comment.author}</strong> says:</p>
          <p>${comment.body}</p>
        `;
        commentsContainer.appendChild(commentElement);
      });
    }
  }

  form.addEventListener('submit', (event) => {
    event.preventDefault();
    const showId = document.getElementById('showId').value;
    const author = document.getElementById('author').value;
    const body = document.getElementById('body').value;
    const comments = getComments();
    comments.push({ author, body });
    localStorage.setItem(`comments-${showId}`, JSON.stringify(comments));
    displayComments();
    form.reset();
  });

  document.addEventListener('DOMContentLoaded', () => {
    displayComments();
  });
</script>

<style>
  .show-detail {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 20px;
  }

  .show--image {
    width: 400px;
    height: 300px;
    object-fit: cover;
  }

  .show--text {
    margin: 20px;
    text-align: center;
  }

  .genre {
    display: inline-block;
    margin-right: 5px;
    padding: 2px 5px;
    background-color: #eee;
    border-radius: 3px;
  }

  .star-rating {
    color: #f8ce0b;
    font-size: 1.3rem;
  }

  .input {
    width: 300px;
    padding: 10px;
    margin: 5px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  button {
    padding: 10px 20px;
    background-color: #FF5733;
    color: white;
    border: none;
    border-radius: 1rem;
    cursor: pointer;
  }
</style>
